# В python има 4 основни колекции: list, tuple, set, dictionary (dict)

# List
# Листовете представляват списък от елементи
# и се използват, за да може да запазваме много стойности в една променлива

list1 = [1, 2, 3]   # [1, 2, 3]

# Листовете имат наредба, могат да бъдат променяни и да съдържат еднакви стойности
# Също така поддържат индексация, започваща от [0]

print(list1[0]) # 1
print(list1[2]) # 3

list1[1] = "This is a string" # Не е задължително елементите на листовете да са от един тип
# [1, "This is a string", 3]

# Поддържа се и обратна индексация, като с индекс -1 взимаме последния елемент
# с -2 предпоследния и тн.

print(list1[-1]) # 3
print(list1[-2]) # "This is a string"

# Добавяме нови елементи с метода append()
list1.append("A new element") # [1, "This is a string", 3, "A new element"]

# С функцията len() може да проверим дължината на даден списък
print(len(list1)) # 4

# Със запазената дума in може да проверим дали елемент се съдържа в списъка
print(1 in list1) # True
print(4 in list1) # False

# С for цикъл може много лесно да въртим през дадена колекция
# Принтиране на всички елементи на лист:
for i in list1:
    print(i)

# Ако искаме да вземем и индексите на елемента може да използваме 
# фунцкията enumerate()
for index, element in enumerate(list1):
    print(index, element)
# 0 1
# 1 "This is a string"
# 2 3
# 3 "A new element"
    
# За други интересни вградени методи на list посетете този линк:
# https://www.w3schools.com/python/python_ref_list.asp
    
# Tuple (кортеж)
# Формално: наредена n-торка, която не може да се променя
# Неформално: list, които не може да се променя и написан със кръгли скоби -> ()

tuple1 = (4, 10, 30)

print(tuple1[0]) # 4

# tuple1[0] = "New" 
# грешка, tuple но може да се променя

# Методи на tuple:
# https://www.w3schools.com/python/python_ref_tuple.asp

# Set
# Формално: множество от елементи, без наредба и повторение
# Неформално: list, в които не е гарантирана първоначалната наредба,
# премахва всички повтарящи се елементи освен първия срещнат и е написан
# с къдрави скоби - {}

set1 = {1, 2, 1, 3, 4, 5, 4, 5, 5} # {1, 2, 3, 4, 5} (ама не е гарантира тази наредба)

# Добавяме елементи с add()
set1.add(4) # нищо не става, 4 вече си е било вътре
print(set1) # {1, 2, 3, 4, 5}

# Методи на set:
# https://www.w3schools.com/python/python_ref_set.asp

# Dictionary (речник)
# Колекция, в която елементите са от тип key:value (ключ:стойност)

carDict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(carDict)

# Елементите достъпваме чрез техните ключове, а не чрез обикновена индексация от [0]

print(carDict["brand"]) # "Ford"
print(carDict["year"]) # 1964

# Ако така обаче се опитаме да достъпим елемент с несъществуващ ключ, 
# то програмата ще изгърми
# carDict["fakeKey"] # грешка
# Това може да постигнем с вградения метод get()

print(carDict.get("brand")) # "Ford"
print(carDict.get("fakeKey")) # None ---> понеже не съществува такъв елемент

# Няма проблеми обаче да добавяме елементи или да променяме стари

carDict["year"] = 2002 # ок
carDict["color"] = "black" # ok
print(carDict)

# {
#  "brand": "Ford",
#  "model": "Mustang",
#  "year": 2002
#  "color": "black"
# }

# Методите на dict:
# https://www.w3schools.com/python/python_ref_dictionary.asp
# (обърнете внимание на keys() и values(), те често се ползват)


# С вградените функции list(), tuple(), dict(), set() 
# може да кастваме променливи към колекциите
# или да създадем празни такива

print(list("Word")) # ["W", "o", "r", "d"]
print(list()) # []
print(set([1, 2, 2, 3, 4])) # {1, 2, 3, 4} --> втората двойка се повтаря, затова set я маха

# Вградената функция zip() приема много колекции (няма ограничена бройка)
# и връща колекция, в която всеки елемент представлява tuple от поелементно 
# запечатани подадените колекции 
# (тоест първи елемент на едната колекция заедно с първия на другите, втори с втори и тн.)

list1 = [1, 2, 3]
list2 = [4, 5, 6]
for i in zip(list1, list2):
    print(i, end=" ")

# (1, 4) (2, 5) (3, 6)